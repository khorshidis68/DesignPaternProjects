الگوی Prototype وقتی به‌درد می‌خورد که ساختن اشیاء جدید پرهزینه یا پیچیده باشد (مثلاً نیاز به مقداردهی اولیه سنگین، تنظیمات زیاد یا کوئری پایگاه‌داده). در این حالت به جای ساختن شیء از صفر، یک نمونه (Prototype) از آن داریم و از روی آن کپی (Clone) می‌گیریم.


🔹 مثال کاربردی: سیستم مدیریت بیمه‌نامه (Insurance Policy Management)

فرض کن در سیستم بیمه باید برای هر مشتری یک بیمه‌نامه جدید صادر شود. ساخت بیمه‌نامه شامل کارهای زیادی است:
* پر کردن اطلاعات اولیه
* تعیین پوشش‌ها (Coverage)
* محاسبه حق‌بیمه پایه
* تنظیمات مربوط به شرکت بیمه

حالا هر بار ساختن این شیء InsurancePolicy از صفر وقت‌گیر می‌شود. در عوض می‌توانیم یک نمونه پایه (Prototype) داشته باشیم و از روی آن کپی کنیم.

---
مزایای Prototype
1.	کاهش نیاز به زیرکلاس‌سازی: نیازی به ایجاد زیرکلاس‌های متعدد برای پیکربندی اشیا نیست
2.	افزایش کارایی: کپی کردن اشیا موجود اغلب از ایجاد جدید آنها کارآمدتر است
3.	انعطاف‌پذیری در زمان اجرا: می‌توان اشیا جدید را با تغییر پیکربندی نمونه‌های موجود ایجاد کرد
4.	ساده‌سازی ایجاد اشیا پیچیده: کپی کردن اشیا پیچیده ساده‌تر از ساخت آنها از ابتدا است
5.	پیروی از اصل Open/Closed: می‌توان اشیا جدید را بدون تغییر کد موجود اضافه کرد

معایب Prototype
1.	پیچیدگی کپی عمیق: پیاده‌سازی کپی عمیق برای اشیا با گراف ارجاعی پیچیده دشوار است
2.	حالت داخلی: ممکن است دسترسی به حالت داخلی شیء برای کپی کردن لازم باشد که اصل encapsulation را نقض کند
3.	مدیریت چرخه حیات: مدیریت اشیا کپی شده ممکن است پیچیده باشد

